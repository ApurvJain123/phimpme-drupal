<?php
/**
* Implementation of hook_enable()
* This is called when this module is enabled, providing us with
* a chance to clear ourselves from the services method cache:
**/
function mbm_own_photos_enable() {
  cache_clear_all('services:mbm_own_photos:', 'cache', true);
}

/**
* Implementation of hook_disable()
* This is called when a module is disabled, providing us with
* a chance to clear ourselves from the services method cache:
*/
function mbm_own_photos_disable() {
  cache_clear_all('services:mbm_own_photos:', 'cache', true);
}


/**
 * Implementation of hook_services_resources().
 **/
function mbm_own_photos_services_resources() {
  return array(
    'own_photos' => array(
      /*
       Example URL:
       endpoint/own_photos/6
       endpoint/own_photos/6?page=1&pagesize=10
      */
	    'retrieve' => array(
          'help'                    => 'Retrieves the photos owned by a certain user.',
          'callback'                => '_mbm_own_photos_retrieve',
          'access callback'         => 'user_access',
          'access arguments'        => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
              array(
                  'name' => 'id',
                  'type' => 'int',
                  'description' => 'The user Id',
                  'source' => array('path' => '0'),
                  'optional' => FALSE,
                ),
              array(
                  'name' => 'page',
                  'optional' => TRUE,
                  'type' => 'int',
                  'description' => 'The zero-based index of the page to get, defaults to 0.',
                  'default value' => 0,
                  'source' => array('param' => 'page'),
                ),
              array(
                  'name' => 'pagesize',
                  'optional' => TRUE,
                  'type' => 'int',
                  'description' => 'Number of records to get per page. Default: 20',
                  'default value' => variable_get('services_file_index_page_size', 20),
                  'source' => array('param' => 'pagesize'),
                ),
              array(
                  'name' => 'asc',
                  'optional' => TRUE,
                  'type' => 'int',
                  'description' => 'Ascending order of results. Default: 0',
                  'default value' => 0,
                  'source' => array('param' => 'asc'),
                )
            )
        ),
      'index' => array(
          'help'                    => 'Retrieves the photos owned by current user.',
          'callback'                => '_mbm_own_photos_index',
          'access callback'         => 'user_access',
          'access arguments'        => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
              array(
                  'name' => 'page',
                  'optional' => TRUE,
                  'type' => 'int',
                  'description' => 'The zero-based index of the page to get, defaults to 0.',
                  'default value' => 0,
                  'source' => array('param' => 'page'),
                ),
              array(
                  'name' => 'pagesize',
                  'optional' => TRUE,
                  'type' => 'int',
                  'description' => 'Number of records to get per page. Default: 20',
                  'default value' => variable_get('services_file_index_page_size', 20),
                  'source' => array('param' => 'pagesize'),
                ),
              array(
                  'name' => 'asc',
                  'optional' => TRUE,
                  'type' => 'int',
                  'description' => 'Ascending order of results. Default: 0',
                  'default value' => 0,
                  'source' => array('param' => 'asc'),
                )
            ),
        ),
      ),
    );
}

/**** Callbacks ****/
function _mbm_own_photos_retrieve($id, $page, $page_size, $asc) {
  $file_select = db_select('file_managed', 'f');
  $file_select->join('field_data_media_gallery_media', 'm', 'f.fid = m.media_gallery_media_fid');
  $file_select->fields('f');
  $file_select->condition('f.uid', $id, '=');
  $file_select->condition('f.type', 'image', '=');
  if ($asc == 1) {
    $file_select->orderBy('f.fid', 'ASC');
  }
  else {
    $file_select->orderBy('f.fid', 'DESC');
  }
  $file_select->range($page*$page_size, $page_size);
  $results = $file_select->execute()->fetchAll();
  /* Add more info for Gallery */
  $style_slide = 'large';
  $style_thumbnail = 'square_thumbnail';
  foreach($results as &$item) {
    $item->url = file_create_url($item->uri);
    $item->slide = image_style_url($style_slide, $item->uri);
    $item->thumbnail = image_style_url($style_thumbnail, $item->uri);
  }
  unset($item);
  return $results;
}

function _mbm_own_photos_index($page, $page_size, $order) {
  global $user;
  return _mbm_own_photos_retrieve($user->uid, $page, $page_size, $asc);
}
?>
