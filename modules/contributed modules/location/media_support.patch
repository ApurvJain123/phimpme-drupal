diff --git a/additional_modules/location/contrib/location_cck/location_cck.module b/additional_modules/location/contrib/location_cck/location_cck.module
index ba1a592..d1fdd82 100644
--- a/additional_modules/location/contrib/location_cck/location_cck.module
+++ b/additional_modules/location/contrib/location_cck/location_cck.module
@@ -163,6 +163,16 @@ function location_cck_field_insert($entity_type, $entity, $field, $instance, $la
       location_save_locations($items, $criteria);
     }
   }
+  elseif ($entity_type == 'file') {
+    if (!empty($items)) {
+      // Store instances of locations by field name and vid.
+      $criteria = array(
+        'genid' => 'cck:' . $field['field_name'] . ':' . $entity->fid,
+        'uid' => $entity->uid,
+      );
+      location_save_locations($items, $criteria);
+    }
+  }
 }
 
 /**
@@ -180,6 +190,16 @@ function location_cck_field_update($entity_type, $entity, $field, $instance, $la
       location_save_locations($items, $criteria);
     }
   }
+  elseif ($entity_type == 'file') {
+    if (!empty($items)) {
+      // Store instances of locations by field name and vid.
+      $criteria = array(
+        'genid' => 'cck:' . $field['field_name'] . ':' . $entity->fid,
+        'uid' => $entity->uid,
+      );
+      location_save_locations($items, $criteria);
+    }
+  }
 }
 
 /**
@@ -200,6 +220,11 @@ function location_cck_field_delete($entity_type, $entity, $field, $instance, $la
       location_save_locations($locs, array('genid' => $genid));
     }
   }
+  elseif ($entity_type == 'file') {
+    $genid = 'cck:' . $field['field_name'] . ':' . $entity->fid;
+    $locs = array();
+    location_save_locations($locs, array('genid' => $genid));
+  }
 }
 
 /**
@@ -211,6 +236,11 @@ function location_cck_field_delete_revision($entity_type, $entity, $field, $inst
     $locs = array();
     location_save_locations($locs, array('genid' => $genid));
   }
+  elseif ($entity_type == 'file') {
+    $genid = 'cck:' . $field['field_name'] . ':' . $entity->fid;
+    $locs = array();
+    location_save_locations($locs, array('genid' => $genid));
+  }
 }
 
 /**
@@ -224,7 +254,7 @@ function location_cck_field_validate($entity_type, $entity, $field, $instance, $
  * Implement hook_field_load().
  */
 function location_cck_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
-  if ($entity_type == 'node') {
+  if ($entity_type == 'node' || $entity_type == 'file') {
     foreach ($entities as $id => $entity) {
       foreach ($items[$id] as $delta => $item) {
         $location = array();
diff --git a/additional_modules/location/location.module b/additional_modules/location/location.module
index 6424ac7..83f096e 100644
--- a/additional_modules/location/location.module
+++ b/additional_modules/location/location.module
@@ -303,7 +303,7 @@ function _location_process_location($element, $form_state) {
         $element[$field]['#weight'] = (int) $fsettings[$field]['weight'];
       }
     }
-    
+
     // If State/Province is using the select widget, update the element's options.
     if ($field == 'province' && $fsettings[$field]['widget'] == 'select') {
       // We are building the element for the first time
@@ -443,7 +443,7 @@ function _location_process_location($element, $form_state) {
   }
 
   $element += element_info('fieldset');
-  
+
   drupal_alter('location_element', $element);
   return $element;
 }
@@ -500,7 +500,7 @@ function _location_process_location_settings(&$element) {
       '#default_value' => $defaults[$field]['collect'],
       '#options' => $options,
     );
-    
+
     $dummy = array();
     $widgets = location_invoke_locationapi($dummy, 'widget', $field);
     if (!empty($widgets)) {
@@ -510,7 +510,7 @@ function _location_process_location_settings(&$element) {
         '#options' => $widgets,
       );
     }
-    
+
     $temp = $defaults[$field]['default'];
     $element[$field]['default'] = location_invoke_locationapi($temp, 'field_expand', $field, 1, $defaults);
     $defaults[$field]['default'] = $temp;
@@ -557,7 +557,7 @@ function theme_location_settings($variables) {
     $row[] = array('data' => '', 'class' => array('location-settings-drag'));
     $row[] = drupal_render($element[$key]['name']);
     $row[] = drupal_render($element[$key]['collect']);
-    $row[] = !empty($element[$key]['widget']) ? drupal_render($element[$key]['widget']) : ''; 
+    $row[] = !empty($element[$key]['widget']) ? drupal_render($element[$key]['widget']) : '';
     $row[] = drupal_render($element[$key]['default']);
     $row[] = array('data' => drupal_render($element[$key]['weight']), 'class' => array('delta-order'));
 
@@ -659,8 +659,8 @@ function location_locationapi(&$obj, $op, $a3 = NULL, $a4 = NULL, $a5 = NULL) {
           }
         }
       }
-      
-      
+
+
 
       if (!empty($obj['locpick']) && is_array($obj['locpick'])) {
         // Can't specify just latitude or just longitude.
@@ -1086,7 +1086,7 @@ function _location_autocomplete($country, $string = '') {
 }
 
 /**
- * AJAX callback for the Country select form, for cases where the province list  
+ * AJAX callback for the Country select form, for cases where the province list
  * is also a select element and its options need to be updated. Uses the D7 Ajax
  * Framework to do the select list updating.
  *
@@ -1104,7 +1104,7 @@ function _location_country_ajax_callback($form, $form_state) {
     return $form['locations'][arg(3)]['province'];
   }
   elseif (isset($form['locations'][arg(2)][arg(3)][arg(4)])) {
-    return $form[arg(2)][arg(3)][arg(4)]['province']; 
+    return $form[arg(2)][arg(3)][arg(4)]['province'];
   }
 }
 
@@ -1520,8 +1520,8 @@ function _location_geo_logic(&$location, $changed, $filled, $inhibit_geocode = F
   // collected through the form, set them to whatever the postal code data
   // says they should be.
   if (!empty($location['postal_code'])) {
-    if (  empty($location['city']) || 
-          empty($location['province']) || 
+    if (  empty($location['city']) ||
+          empty($location['province']) ||
           empty($location['location_settings']['form']['fields']['city']['collect']) ||
           empty($location['location_settings']['form']['fields']['province']['collect'])
        ) {
@@ -1646,7 +1646,7 @@ function template_preprocess_location(&$variables) {
   // Map link.
   $variables['map_link'] = '';
   if (!empty($location['map_link'])) {
-    // Do not use $location for generating the map link, since it will 
+    // Do not use $location for generating the map link, since it will
     // not contain the country if that field is hidden.
     $variables['map_link'] = location_map_link($variables['location']);
   }
