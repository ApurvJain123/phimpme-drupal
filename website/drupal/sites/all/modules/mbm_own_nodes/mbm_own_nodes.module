<?php
/**
* Implementation of hook_enable()
* This is called when this module is enabled, providing us with
* a chance to clear ourselves from the services method cache:
**/
function mbm_own_nodes_enable() {
  cache_clear_all('services:mbm_own_nodes:', 'cache', true);
}

/**
* Implementation of hook_disable()
* This is called when a module is disabled, providing us with
* a chance to clear ourselves from the services method cache:
*/
function mbm_own_nodes_disable() {
  cache_clear_all('services:mbm_own_nodes:', 'cache', true);
}

/**
 * Implementation of hook_services_resources().
 **/
function mbm_own_nodes_services_resources() {
  return array(
    'own_nodes' => array(
      /*
       Example URL:
       endpoint/own_nodes/6
       endpoint/own_nodes/6?type=media_gallery
      */
	    'retrieve' => array(
          'help'                    => 'Retrieves the nodes owned by a certain user.',
          'callback'                => '_mbm_own_nodes_retrieve',
          'access callback'         => 'user_access',
          'access arguments'        => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
              array(
                  'name' => 'id',
                  'type' => 'int',
                  'description' => 'The user Id',
                  'source' => array('path' => '0'),
                  'optional' => FALSE,
                ),
              array(
                  'name' => 'type',
                  'optional' => TRUE,
                  'type' => 'string',
                  'description' => 'The type of the nodes.',
                  'default value' => '',
                  'source' => array('param' => 'type'),
                )
						),
        ),
      'index' => array(
          'help'                    => 'Retrieves the nodes owned by current user.',
          'callback'                => '_mbm_own_nodes_index',
          'access callback'         => 'user_access',
          'access arguments'        => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
              array(
                  'name' => 'type',
                  'optional' => TRUE,
                  'type' => 'string',
                  'description' => 'The type of the nodes.',
                  'default value' => '',
                  'source' => array('param' => 'type'),
                )
            ),
        ),
      ),
    );
}

/**** Callbacks ****/
function _mbm_own_nodes_retrieve($id=0, $type='') {
  $node_select = db_select('node', 'n')->fields('n');
  $node_select->condition('n.uid', $id, '=');
  if ($type != '') {
    $node_select->condition('n.type', $type, '=');
  }
  $results = $node_select->execute()->fetchAll();
  return $results;
}

function _mbm_own_nodes_index($type='') {
  global $user;
  return _mbm_own_nodes_retrieve($user->uid, $type);
}
?>
